from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils import load_data, save_data

ADMIN_ID = 5050707973
STICKER_ID = "CAACAgQAAxkBAAEQqhRodkFgIxuOVo8U7SR54jNPXc4u8wAC-RcAApegmFO3ic78vJPsijYE"

async def notify_admin(bot, text, story_idx, username, user_id):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{story_idx}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{story_idx}")
    )
    await bot.send_message(ADMIN_ID,
        f"üìù –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç @{username} (ID: {user_id}):\n\n{text}",
        reply_markup=kb
    )

def register_admin_callbacks(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data.startswith(("approve_", "decline_")))
    async def on_moderation(c: types.CallbackQuery):
        from main import bot, send_new_story_notifications  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
        data = load_data()
        idx = int(c.data.split("_")[1])
        story = data["stories"][idx]
        uid = story["user_id"]
        if c.data.startswith("approve_"):
            story["approved"] = True
            save_data(data)
            await bot.send_sticker(uid, STICKER_ID)
            await bot.send_message(uid, "üéâ –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ —É–∂–µ –≤–∏–¥–Ω–∞ –≤—Å–µ–º –≤ –±–æ—Ç–µ!")
            await send_new_story_notifications(data, story)
            await c.message.edit_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!")
        else:
            await bot.send_message(uid, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª.")
            await c.message.edit_text("üóë –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    @dp.callback_query_handler(lambda c: c.data == "rules")
    async def on_rules(c: types.CallbackQuery):
        await c.message.edit_text(
            "üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π:</b>\n\n"
            "1. –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±—Ä–æ–π, —Å–≤–µ—Ç–ª–æ–π –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π.\n"
            "2. –ë–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –Ω–µ–≥–∞—Ç–∏–≤–∞, –º–∞—Ç–∞ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã.\n"
            "3. –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "4. –ò—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏! ‚ù§Ô∏è", parse_mode="HTML"
        )

    @dp.message_handler(commands=["admin"])
    async def on_admin(m: types.Message):
        if m.from_user.id != ADMIN_ID:
            await m.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
            return
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞ / –û –±–æ—Ç–µ", callback_data="rules")
        )
        await m.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=kb)
