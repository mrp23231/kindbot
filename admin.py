from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils import load_data, save_data

ADMIN_ID = 5050707973
STICKER_ID = "CAACAgQAAxkBAAEQqhRodkFgIxuOVo8U7SR54jNPXc4u8wAC-RcAApegmFO3ic78vJPsijYE"

def register_admin_callbacks(dp: types.Dispatcher):
    @dp.callback_query_handler(lambda c: c.data.startswith(("approve_", "decline_")))
    async def on_moderation(c: types.CallbackQuery):
        data = load_data()
        idx = int(c.data.split("_")[1])
        story = data["stories"][idx]
        uid = story["user_id"]
        if c.data.startswith("approve_"):
            story["approved"] = True
            save_data(data)
            await bot.send_sticker(uid, STICKER_ID)
            await bot.send_message(uid, "üéâ –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ —É–∂–µ –≤–∏–¥–Ω–∞ –≤—Å–µ–º!")
            await send_new_story_notifications(data, story)
            await c.message.edit_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!")
        else:
            save_data(data)
            await bot.send_message(uid, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await c.message.edit_text("üóë –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    @dp.callback_query_handler(lambda c: c.data == "rules")
    async def on_rules(c: types.CallbackQuery):
        await c.message.edit_text(
            "üìã –ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
            "1. –¢–æ–ª—å–∫–æ –¥–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏.\n"
            "2. –ë–µ–∑ –º–∞—Ç–∞, —Ä–µ–∫–ª–∞–º—ã, –∞–≥—Ä–µ—Å—Å–∏–∏.\n"
            "3. –ü–∏—à–∏ –æ—Ç –¥—É—à–∏."
        )

    @dp.message_handler(commands=["admin"])
    async def on_admin(m: types.Message):
        if m.from_user.id != ADMIN_ID:
            await m.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞ / –û –±–æ—Ç–µ", callback_data="rules"))
        await m.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)
