from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext

ADMIN_ID = 5050707973
STICKER_ID = "CAACAgQAAxkBAAEQqhRodkFgIxuOVo8U7SR54jNPXc4u8wAC-RcAApegmFO3ic78vJPsijYE"

def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –ê–≤—Ç–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏", callback_data="set_author_week")],
        [InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")]
    ])

async def notify_admin(text, index, username, user_id, bot):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{index}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{index}")
        ]
    ])
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç @{username or user_id} (ID: {user_id}):\n\n{text}", reply_markup=markup)

async def register_admin_callbacks(message, bot):
    await message.answer("üëÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard())

def setup_admin_callbacks(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
    async def moderate_story(callback: types.CallbackQuery):
        from main import load_data, save_data
        data = load_data()
        idx = int(callback.data.split("_")[1])
        story = data["stories"][idx]
        author_id = story["user_id"]

        if callback.data.startswith("approve_"):
            story["approved"] = True
            save_data(data)
            await callback.bot.send_message(author_id, "üéâ –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ —É–∂–µ –≤–∏–¥–Ω–∞ –≤—Å–µ–º –≤ –±–æ—Ç–µ!")
            await callback.bot.send_sticker(author_id, STICKER_ID)
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ")
        else:
            data["stories"].pop(idx)
            save_data(data)
            await callback.bot.send_message(author_id, "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª.")
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")

    @dp.callback_query_handler(lambda c: c.data == "show_rules")
    async def show_rules(callback: types.CallbackQuery):
        await callback.answer()
        await callback.message.answer("üìã –ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n‚Äî –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±—Ä–æ–π\n‚Äî –ù–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤\n‚Äî –ë–µ–∑ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã")

    @dp.callback_query_handler(lambda c: c.data == "set_author_week")
    async def set_author(callback: types.CallbackQuery):
        await callback.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
