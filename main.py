import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN
from admin import notify_admin, ADMIN_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –†–∞–±–æ—Ç–∞ —Å JSON
def load_data():
    try:
        with open("database.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {"stories": []}

def save_data(data):
    with open("database.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π")
    kb.add("üìñ –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏", "üèÜ –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π")
    return kb

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class StoryState(StatesGroup):
    waiting_for_text = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    name = message.from_user.username or message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=main_menu())

# –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π
@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π")
async def start_story(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–±—Ä—É—é –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é. –ú—ã –¥–æ–±–∞–≤–∏–º –µ—ë –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ üïäÔ∏è")
    await StoryState.waiting_for_text.set()

@dp.message_handler(state=StoryState.waiting_for_text)
async def save_story(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 20:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return
    data = load_data()
    data["stories"].append({
        "text": text,
        "likes": 0,
        "user_id": message.from_user.id,
        "approved": False
    })
    index = len(data["stories"]) - 1
    save_data(data)
    await notify_admin(text, index, message.from_user.username, message.from_user.id)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚ú®", reply_markup=main_menu())
    await state.finish()

# –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏
@dp.message_handler(lambda m: m.text == "üìñ –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏")
async def read_stories(message: types.Message):
    data = load_data()
    approved = [s for s in data["stories"] if s["approved"]]
    if not approved:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π üòî")
        return
    await show_story(message, approved, 0)

def story_markup(index):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{index}")],
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_{index}")]
    ])

async def show_story(msg, stories, index):
    if index >= len(stories):
        await msg.answer("–ë–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏–π –Ω–µ—Ç.", reply_markup=main_menu())
        return
    story = stories[index]
    text = story["text"][:4096]
    markup = story_markup(index)
    if isinstance(msg, types.CallbackQuery):
        await msg.message.edit_text(text, reply_markup=markup)
    else:
        await msg.answer(text, reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("like_") or c.data.startswith("next_"))
async def story_buttons(callback: types.CallbackQuery):
    action, idx = callback.data.split("_")
    idx = int(idx)
    data = load_data()
    approved = [s for s in data["stories"] if s["approved"]]
    if idx >= len(approved):
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if action == "like":
        approved[idx]["likes"] += 1
        save_data(data)
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫ ‚ù§Ô∏è")
        await show_story(callback, approved, idx)
    elif action == "next":
        await show_story(callback, approved, idx + 1)

# –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π
@dp.message_handler(lambda m: m.text == "üèÜ –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π")
async def top_stories(message: types.Message):
    data = load_data()
    top = sorted([s for s in data["stories"] if s["approved"]], key=lambda x: x["likes"], reverse=True)[:3]
    if not top:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.")
        return
    text = "üèÜ –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π –Ω–µ–¥–µ–ª–∏:\n\n"
    for i, s in enumerate(top):
        preview = s["text"][:150] + "..." if len(s["text"]) > 150 else s["text"]
        text += f"{i+1}. ‚ù§Ô∏è {s['likes']} –ª–∞–π–∫–æ–≤\n{preview}\n\n"
    await message.answer(text)

# –£–¥–∞–ª—è–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == '__main__':
    async def on_startup():
        await bot.delete_webhook(drop_pending_updates=True)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup())
    executor.start_polling(dp, skip_updates=True)
