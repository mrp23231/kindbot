import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_polling

from bot_init import bot, dp
from utils import load_data, save_data, get_user, update_user_points
from admin import notify_admin

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π", "üìñ –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏")
    kb.add("üèÜ –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π", "üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å")
    kb.add("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    return kb

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
class StoryState(StatesGroup):
    waiting_for_text = State()

# /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_data = load_data()
    user = get_user(user_data, message.from_user.id)
    save_data(user_data)

    name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
        "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏–ª–∏ –ø–æ—á–∏—Ç–∞–π –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ üåü",
        reply_markup=main_menu()
    )

# –ù–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π")
async def ask_story(message: types.Message):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–±—Ä—É—é –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é.\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–Ω–∞ –ø—Ä–æ–π–¥—ë—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é üïäÔ∏è")
    await StoryState.waiting_for_text.set()

@dp.message_handler(state=StoryState.waiting_for_text)
async def receive_story(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 20:
        await message.answer("üìè –ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return

    data = load_data()

    story = {
        "text": text,
        "likes": 0,
        "user_id": message.from_user.id,
        "approved": False,
        "liked_by": [],
        "rejected": False
    }

    data["stories"].append(story)
    story_id = len(data["stories"]) - 1

    # –û–±–Ω–æ–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user(data, message.from_user.id)
    user["submitted"] += 1
    save_data(data)

    await notify_admin(text, story_id, message.from_user.username, message.from_user.id)

    await message.answer("‚è≥ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n–û–∂–∏–¥–∞–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üôå", reply_markup=main_menu())
    await state.finish()

# –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏
@dp.message_handler(lambda m: m.text == "üìñ –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏")
async def read_stories(message: types.Message):
    data = load_data()
    approved = [s for s in data["stories"] if s["approved"] and not s.get("rejected")]
    if not approved:
        await message.answer("üòï –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.")
        return
    await show_story(message, approved, 0)

def story_markup(index):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{index}")],
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_{index}")]
    ])

async def show_story(msg, stories, index):
    if index >= len(stories):
        await msg.answer("üìö –ë–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏–π –Ω–µ—Ç.", reply_markup=main_menu())
        return

    story = stories[index]
    preview = story["text"][:4096]
    markup = story_markup(index)

    if isinstance(msg, types.CallbackQuery):
        await msg.message.edit_text(preview, reply_markup=markup)
    else:
        await msg.answer(preview, reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("like_") or c.data.startswith("next_"))
async def handle_buttons(callback: types.CallbackQuery):
    action, idx = callback.data.split("_")
    idx = int(idx)
    data = load_data()
    approved = [s for s in data["stories"] if s["approved"] and not s.get("rejected")]

    if idx >= len(approved):
        await callback.answer("–û—à–∏–±–∫–∞: –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    story = approved[idx]
    full_list = data["stories"]
    real_index = full_list.index(story)

    if action == "like":
        if callback.from_user.id in story["liked_by"]:
            await callback.answer("–¢—ã —É–∂–µ –ª–∞–π–∫–∞–ª(–∞) —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é üí°", show_alert=True)
            return

        story["likes"] += 1
        story["liked_by"].append(callback.from_user.id)

        # –û–±–Ω–æ–≤–∏–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user(data, callback.from_user.id)
        user["likes_given"] += 1
        update_user_points(user, +1)

        save_data(data)
        await callback.answer("‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!")
        await show_story(callback, approved, idx)

    elif action == "next":
        await show_story(callback, approved, idx + 1)

# –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π
@dp.message_handler(lambda m: m.text == "üèÜ –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π")
async def top_stories(message: types.Message):
    data = load_data()
    top = sorted(
        [s for s in data["stories"] if s["approved"] and not s.get("rejected")],
        key=lambda x: x["likes"], reverse=True
    )[:3]

    if not top:
        await message.answer("üòï –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.")
        return

    text = "üèÜ <b>–¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π –Ω–µ–¥–µ–ª–∏:</b>\n\n"
    for i, s in enumerate(top):
        preview = s["text"][:150] + "..." if len(s["text"]) > 150 else s["text"]
        text += f"{i+1}. ‚ù§Ô∏è {s['likes']} –ª–∞–π–∫–æ–≤\n{preview}\n\n"

    await message.answer(text, parse_mode="HTML")

# –ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(lambda m: m.text == "üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    data = load_data()
    user = get_user(data, message.from_user.id)

    points = user["kindness_points"]
    if points >= 50:
        rank = "ü•á –ó–æ–ª–æ—Ç–æ"
    elif points >= 20:
        rank = "ü•à –°–µ—Ä–µ–±—Ä–æ"
    else:
        rank = "ü•â –ë—Ä–æ–Ω–∑–∞"

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"üèÖ –†–∞–Ω–≥: {rank}\n"
        f"‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: {user['likes_given']}\n"
        f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å—Ç–æ—Ä–∏–π: {user['submitted']}\n"
        f"üåü –û—á–∫–∏ –¥–æ–±—Ä–æ—Ç—ã: {points}"
    )
    await message.answer(text, parse_mode="HTML")

# –û –±–æ—Ç–µ
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    await message.answer(
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º–∏ –∏ –¥–æ–±—Ä—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏ üïäÔ∏è\n\n"
        "üë• –ò—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
        "üèÜ –ò—Å—Ç–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ç–æ–ø –Ω–µ–¥–µ–ª–∏\n"
        "üìä –í—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—á–∫–∏ –¥–æ–±—Ä–æ—Ç—ã, —Å—Ç–∞–≤—è –ª–∞–π–∫–∏\n\n"
        "‚ö†Ô∏è <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        "‚Äî –ë–µ–∑ –º–∞—Ç–∞\n"
        "‚Äî –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚Äî –ë–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –¥—É—à–µ–≤–Ω—ã—Ö –ª—é–¥–µ–π.",
        parse_mode="HTML"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_polling(dp, skip_updates=True)
