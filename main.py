import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_polling

from bot_init import bot, dp
from utils import load_data, save_data, get_user, get_kindness_rank
from admin import notify_admin

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π")
    kb.add("üìñ –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏", "üèÜ –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π")
    kb.add("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    return kb

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class StoryState(StatesGroup):
    waiting_for_text = State()

# /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_data = load_data()
    user = get_user(user_data, message.from_user.id)
    rank = get_kindness_rank(user["kindness_points"])
    name = message.from_user.username or message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n"
        f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–±—Ä–æ—Ç—ã: {rank}\n\n"
        f"–ü–æ–¥–µ–ª–∏—Å—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏–ª–∏ –ø–æ—á–∏—Ç–∞–π –¥—Ä—É–≥–∏–µ:",
        reply_markup=main_menu()
    )

# –ö–Ω–æ–ø–∫–∞ "–û –±–æ—Ç–µ"
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    text = (
        "ü§ñ <b>–û –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è –¥–æ–±—Ä–æ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º ‚ú®.\n\n"
        "üí¨ –ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–±—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é. –ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ—Ç–µ.\n"
        "‚ù§Ô∏è –ò—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –ª–∞–π–∫–∞—Ç—å. –ó–∞ –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏–º —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—á–∫–∏ –¥–æ–±—Ä–æ—Ç—ã!\n\n"
        "<b>üéñ –£—Ä–æ–≤–Ω–∏ –¥–æ–±—Ä–æ—Ç—ã:</b>\n"
        "ü•â –ë—Ä–æ–Ω–∑–∞ ‚Äî 0‚Äì14 –æ—á–∫–æ–≤\n"
        "ü•à –°–µ—Ä–µ–±—Ä–æ ‚Äî 15‚Äì29 –æ—á–∫–æ–≤\n"
        "ü•á –ó–æ–ª–æ—Ç–æ ‚Äî 30+ –æ—á–∫–æ–≤\n\n"
        "üì¢ –ò—Å—Ç–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é!\n\n"
        "<b>üìú –ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        "‚Äî –ù–µ–ª—å–∑—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–≥—Ä–µ—Å—Å–∏—é, —Ä–µ–∫–ª–∞–º—É, –º–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n"
        "‚Äî –¢–æ–ª—å–∫–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –¥–æ–±—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
        "–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –ª—é–¥–µ–π."
    )
    await message.answer(text, parse_mode="HTML")

# –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π
@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π")
async def start_story(message: types.Message):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–±—Ä—É—é –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é. –ú—ã –¥–æ–±–∞–≤–∏–º –µ—ë –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ üïäÔ∏è")
    await StoryState.waiting_for_text.set()

@dp.message_handler(state=StoryState.waiting_for_text)
async def save_story(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 20:
        await message.answer("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return
    data = load_data()
    story = {
        "text": text,
        "likes": 0,
        "user_id": message.from_user.id,
        "approved": False,
        "liked_by": []
    }
    data["stories"].append(story)
    index = len(data["stories"]) - 1
    save_data(data)
    await notify_admin(text, index, message.from_user.username, message.from_user.id)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚ú®", reply_markup=main_menu())
    await state.finish()

# –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏
@dp.message_handler(lambda m: m.text == "üìñ –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏")
async def read_stories(message: types.Message):
    data = load_data()
    approved = [s for s in data["stories"] if s.get("approved") and not s.get("rejected")]
    if not approved:
        await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.")
        return
    await show_story(message, approved, 0)

def story_markup(index):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{index}")],
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_{index}")]
    ])

async def show_story(msg, stories, index):
    if index >= len(stories):
        await msg.answer("üìö –ë–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏–π –Ω–µ—Ç.", reply_markup=main_menu())
        return
    story = stories[index]
    text = f"üìñ <i>–ò—Å—Ç–æ—Ä–∏—è:</i>\n\n{story['text'][:4096]}"
    markup = story_markup(index)
    if isinstance(msg, types.CallbackQuery):
        await msg.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    else:
        await msg.answer(text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data.startswith("like_") or c.data.startswith("next_"))
async def story_buttons(callback: types.CallbackQuery):
    action, idx = callback.data.split("_")
    idx = int(idx)
    data = load_data()
    approved = [s for s in data["stories"] if s.get("approved") and not s.get("rejected")]
    if idx >= len(approved):
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    story = approved[idx]
    all_stories = data["stories"]
    story_index = all_stories.index(story)

    user_id = str(callback.from_user.id)
    user = get_user(data, user_id)

    if action == "like":
        if callback.from_user.id in all_stories[story_index]["liked_by"]:
            await callback.answer("‚ö†Ô∏è –¢—ã —É–∂–µ –ª–∞–π–∫–∞–ª(–∞) —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é üí°", show_alert=True)
            return
        all_stories[story_index]["likes"] += 1
        all_stories[story_index]["liked_by"].append(callback.from_user.id)
        user["likes_given"] += 1
        user["kindness_points"] += 1
        save_data(data)
        await callback.answer("‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!")
        await show_story(callback, approved, idx)
    elif action == "next":
        await show_story(callback, approved, idx + 1)

# –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π
@dp.message_handler(lambda m: m.text == "üèÜ –¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π")
async def top_stories(message: types.Message):
    data = load_data()
    top = sorted([s for s in data["stories"] if s.get("approved") and not s.get("rejected")], key=lambda x: x["likes"], reverse=True)[:3]
    if not top:
        await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.")
        return
    text = "üèÜ <b>–¢–æ–ø –∏—Å—Ç–æ—Ä–∏–π –Ω–µ–¥–µ–ª–∏:</b>\n\n"
    for i, s in enumerate(top):
        preview = s["text"][:150] + "..." if len(s["text"]) > 150 else s["text"]
        text += f"{i+1}. ‚ù§Ô∏è <b>{s['likes']} –ª–∞–π–∫–æ–≤</b>\n{preview}\n\n"
    await message.answer(text, parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_polling(dp, skip_updates=True)
