import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from admin import notify_admin, register_admin_callbacks
from utils import load_data, save_data, get_user, get_badge, main_menu

API_TOKEN = "8148757569:AAFOJAh97I9YKktYPT76_JO_M8khUdWnwcw"  # ‚Üê –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class StoryState(StatesGroup):
    waiting_for_text = State()


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    data = load_data()
    get_user(data, message.from_user.id, message.from_user.username)
    save_data(data)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KindBot ‚Äî –º–∏–Ω–∏‚Äë—Å–µ—Ç—å –¥–æ–±—Ä—ã—Ö –∏—Å—Ç–æ—Ä–∏–π!", reply_markup=main_menu())


@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π")
async def cmd_share(message: types.Message):
    await message.answer("üìù –ù–∞–ø–∏—à–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é. –ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    await StoryState.waiting_for_text.set()


@dp.message_handler(state=StoryState.waiting_for_text)
async def on_share(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 20:
        await message.answer("üìè –ò—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return
    data = load_data()
    story = {
        "text": text,
        "likes": 0,
        "thanks": 0,
        "user_id": message.from_user.id,
        "approved": False,
        "liked_by": [],
        "thanked_by": []
    }
    data["stories"].append(story)
    idx = len(data["stories"]) - 1
    save_data(data)
    await notify_admin(bot, text, idx, message.from_user.username, message.from_user.id)
    await message.answer("‚ú® –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±—Ä–æ—Ç—É!", reply_markup=main_menu())
    await state.finish()


def make_story_markup(idx, story, viewer_id, data):
    liked = viewer_id in story["liked_by"]
    thanked = viewer_id in story["thanked_by"]
    subbed = str(viewer_id) in data.get("subscriptions", {}) and str(story["user_id"]) in data["subscriptions"][str(viewer_id)]
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{idx}"))
    kb.add(types.InlineKeyboardButton("üôè –°–ø–∞—Å–∏–±–æ", callback_data=f"thank_{idx}"))
    kb.add(types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if not subbed else "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"sub_{story['user_id']}"))
    kb.add(types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_{idx}"))
    return kb


@dp.message_handler(lambda m: m.text == "üìñ –ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏")
async def cmd_read(message: types.Message):
    data = load_data()
    approved = [s for s in data["stories"] if s["approved"]]
    if not approved:
        await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–π.")
        return
    story = approved[0]
    markup = make_story_markup(0, story, message.from_user.id, data)
    await message.answer(story["text"], reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith(("like_", "thank_", "sub_", "next_")))
async def cq_actions(c: types.CallbackQuery):
    data = load_data()
    parts = c.data.split("_")
    action = parts[0]
    viewer = c.from_user.id

    if action in ("like", "thank", "next"):
        idx = int(parts[1])
        story = [s for s in data["stories"] if s["approved"]][idx]
        global_idx = data["stories"].index(story)
        if action == "like":
            if viewer in story["liked_by"]:
                await c.answer("‚úÖ –£–∂–µ –ª–∞–π–∫–∞–ª", show_alert=True)
            else:
                story["likes"] += 1
                story["liked_by"].append(viewer)
                save_data(data)
                await c.answer("‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!")
        elif action == "thank":
            if viewer in story["thanked_by"]:
                await c.answer("‚úÖ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–ø–∞—Å–∏–±–æ", show_alert=True)
            else:
                story["thanks"] += 1
                story["thanked_by"].append(viewer)
                data["users"][str(story["user_id"])]["points"] += 1
                data["users"][str(story["user_id"])]["thanks"] += 1
                save_data(data)
                await c.answer("üôè –°–ø–∞—Å–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        elif action == "next":
            await cmd_read(c.message)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = load_data()
        story = [s for s in data["stories"] if s["approved"]][idx]
        markup = make_story_markup(idx, story, viewer, data)
        await c.message.edit_text(story["text"], reply_markup=markup)

    elif action == "sub":
        author = parts[1]
        subs = data.setdefault("subscriptions", {})
        subs.setdefault(str(viewer), [])
        if author in subs[str(viewer)]:
            subs[str(viewer)].remove(author)
            await c.answer("üîï –û—Ç–ø–∏—Å–∞–ª—Å—è")
        else:
            subs[str(viewer)].append(author)
            await c.answer("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
        save_data(data)
        # –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(m: types.Message):
    data = load_data()
    user = get_user(data, m.from_user.id)
    badge = get_badge(user, m.from_user.id, data)
    text = (f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['username']}\n"
            f"‚ú® –û—á–∫–∏ –¥–æ–±—Ä–æ—Ç—ã: {user['points']}\n"
            f"üôè –°–ø–∞—Å–∏–±–æ –ø–æ–ª—É—á–µ–Ω–æ: {user['thanks']}\n"
            f"üèÖ –ë–µ–π–¥–∂: {badge or '‚Äî'}")
    await m.answer(text)

@dp.message_handler(lambda m: m.text == "üß± –°—Ç–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏")
async def cmd_wall(m: types.Message):
    data = load_data()
    tops = sorted(data["users"].values(), key=lambda u: u["thanks"], reverse=True)[:5]
    if not tops:
        await m.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª ¬´–°–ø–∞—Å–∏–±–æ¬ª")
        return
    text = "üß± –°—Ç–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:\n\n"
    for u in tops:
        text += f"@{u['username']} ‚Äî üôè {u['thanks']}\n"
    await m.answer(text)

@dp.message_handler(commands=["admin"])
async def cmd_admin(m: types.Message):
    await register_admin_callbacks(dp)  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    await types.Chat(id=m.chat.id).send_message("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

async def send_new_story_notifications(data, story):
    author = str(story["user_id"])
    for u, subs in data.get("subscriptions", {}).items():
        if author in subs:
            keyboard = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=f"open_{data['stories'].index(story)}")
            )
            await bot.send_message(int(u), f"üîî @{data['users'][author]['username']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é!", reply_markup=keyboard)

register_admin_callbacks(dp)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
